services:
    sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        container_name: sqlserver
        environment:
            - ACCEPT_EULA=Y
            - SA_PASSWORD=Your_password123
            - MSSQL_PID=Express
        ports:
            - "1433:1433"
        networks:
            - app-net

    redis:
        image: redis
        ports:
            - "6379:6379"
        networks:
            - app-net

    zookeeper:
        image: confluentinc/cp-zookeeper:7.4.0
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        ports:
            - "2181:2181"
        networks:
            - app-net

    kafka:
        image: confluentinc/cp-kafka:7.4.0
        depends_on:
            - zookeeper
        ports:
            - "29092:29092"
            - "9092:9092"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        networks:
            - app-net
        healthcheck:
            test:
                [
                    "CMD",
                    "kafka-topics",
                    "--bootstrap-server",
                    "localhost:9092",
                    "--list",
                ]
            interval: 10s
            timeout: 5s
            retries: 10

    caddy:
        image: caddy:2.6-alpine
        container_name: caddy
        restart: unless-stopped
        ports:
            - "${CADDY_PORT_80:-127.0.0.1}:80:80"
            - "${CADDY_PORT_443:-127.0.0.1}:443:443"
            - "${CADDY_PORT_443:-127.0.0.1}:8080:8080"
        volumes:
            - ./Caddyfile:/etc/caddy/Caddyfile
            - caddy_data:/data
            - caddy_config:/config
        depends_on:
            - file
            - proxy
            - auth
        networks:
            - app-net

    frontend:
        build:
            context: ./frontend
            dockerfile: Dockerfile
        networks:
            - app-net
        environment:
            - NODE_ENV=production
        image: order-platform-microservice/frontend:latest

    file:
        build:
            context: ./fileServer
            dockerfile: Dockerfile
        volumes:
            - uploaded-media:/app/media
        depends_on:
            - frontend
        networks:
            - app-net
        image: order-platform-microservice/file-server:latest

    proxy:
        build:
            context: ./backend
            dockerfile: Dockerfile
        networks:
            - app-net
        depends_on:
            redis:
                condition: service_started
            kafka:
                condition: service_healthy
        environment:
            REDIS_URL: redis://redis:6379
        image: order-platform-microservice/proxy:latest

    auth:
        build:
            context: ./auth
            dockerfile: Dockerfile
        networks:
            - app-net
        image: order-platform-microservice/auth-server:latest

    web:
        build:
            context: .
            dockerfile: Dockerfile
        environment:
            - ASPNETCORE_ENVIRONMENT=Production
            - ASPNETCORE_URLS=http://+:5000
            - SqlServer_Database=Server=sqlserver;Database=YourDb;User Id=sa;Password=Your_password123;
        depends_on:
            kafka:
                condition: service_healthy
        networks:
            - app-net
        image: order-platform-microservice/main-api:latest

networks:
    app-net:
        driver: bridge

volumes:
    uploaded-media:
    caddy_data:
    caddy_config:
